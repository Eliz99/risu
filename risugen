#!/usr/bin/perl -w
#
# risugen -- generate a test binary file for use with risu
# Copyright 2010 Linaro Limited.

# Usage: risugen outputfile

use strict;
use Getopt::Long;

my @insns;
my %insn_details;

my $is_thumb = 0;

my @pattern_re = ();

my $bytecount;

sub open_bin
{
    my ($fname) = @_;
    open(BIN, ">", $fname) or die "can't open %fname: $!";
    $bytecount = 0;
}

sub close_bin
{
    close(BIN) or die "can't close output file: $!";
}

sub insn32($)
{
    my ($insn) = @_;
    print BIN pack("V", $insn);
    $bytecount += 4;
}

sub insn16($)
{
    my ($insn) = @_;
    print BIN pack("v", $insn);
    $bytecount += 2;
}

sub align4()
{
    if ($bytecount & 3) {
        insn16(0xbf00);  # NOP
    }
}

# The space 0xE7F___F_ is guaranteed to always UNDEF
# and not to be allocated for insns in future architecture
# revisions. So we use it for our 'do comparison' and
# 'end of test' instructions.
# We fill in the middle bit with a randomly selected
# 'e5a' just in case the space is being used by somebody
# else too.

# For Thumb the equivalent space is 0xDExx.

sub write_test_end()
{
    if ($is_thumb) {
        insn16(0xdee1);
    } else {
        insn32(0xe7fe5af1);
    }
}

sub write_compare()
{
    if ($is_thumb) {
        insn16(0xdee0);
    } else {
        insn32(0xe7fe5af0);
    }
}

sub write_switch_to_thumb()
{
    # Note that we have to clean up r0 afterwards
    # so it isn't tainted with a value which depends
    # on PC (and which might differ between hw and
    # qemu/valgrind/etc)
    insn32(0xe28f0001); # add r0, pc, #1
    insn32(0xe12fff10); # bx r0
    insn16(0x4040);     # eor r0,r0 (enc T1)
}

sub write_switch_to_arm()
{
    # Switch to ARM mode.
    align4();
    insn16(0x4778);  # bx pc
    insn16(0xbf00);  # nop
}

sub write_random_double_fpreg()
{
    my ($low, $high);
    my $r = rand(100);
    if ($r < 5) {
        # +-0 (5%)
        $low = $high = 0;
        $high |= 0x80000000 if (rand() < 0.5);
    } elsif ($r < 10) {
        # NaN (5%)
        # (plus a tiny chance of generating +-Inf)
        $low = rand(0xffffffff);
        $high = rand(0xffffffff) | 0x7ff00000;
    } elsif ($r < 15) {
        # Infinity (5%)
        $low = 0;
        $high = 0x7ff00000;
        $high |= 0x80000000 if (rand() < 0.5);
    } elsif ($r < 30) {
        # Denormalized number (15%)
        # (plus tiny chance of +-0)
        $low = rand(0xffffffff);
        $high = rand(0xffffffff) & ~0x7ff00000;
    } else {
        # Normalized number (70%)
        # (plus a small chance of the other cases)
        $low = rand(0xffffffff);
        $high = rand(0xffffffff);
    }
    insn32($low);
    insn32($high);
}

sub write_random_single_fpreg()
{
    my ($value);
    my $r = rand(100);
    if ($r < 5) {
        # +-0 (5%)
        $value = 0;
        $value |= 0x80000000 if (rand() < 0.5);
    } elsif ($r < 10) {
        # NaN (5%)
        # (plus a tiny chance of generating +-Inf)
        $value = rand(0xffffffff) | 0x7f800000;
    } elsif ($r < 15) {
        # Infinity (5%)
        $value = 0x7f800000;
        $value |= 0x80000000 if (rand() < 0.5);
    } elsif ($r < 30) {
        # Denormalized number (15%)
        # (plus tiny chance of +-0)
        $value = rand(0xffffffff) & ~0x7f800000;
    } else {
        # Normalized number (70%)
        # (plus a small chance of the other cases)
        $value = rand(0xffffffff);
    }
    insn32($value);
}

sub write_random_fpreg()
{
    # Write out 64 bits of random data intended to
    # initialise an FP register.
    # We tweak the "randomness" here to increase the
    # chances of picking interesting values like
    # NaN, -0.0, and so on, which would be unlikely
    # to occur if we simply picked 64 random bits.
    if (rand() < 0.5) {
        write_random_double_fpreg();
    } else {
        write_random_single_fpreg();
        write_random_single_fpreg();
    }
}

sub write_random_register_data()
{
    # TODO hardcoded, also no d16-d31 initialisation
    my $vfp = 2;  # 0 : no vfp, 1 : vfpd16, 2 : vfpd32
    if ($is_thumb) {
        write_switch_to_arm();
    }
    
    # initialise all registers
    if ($vfp == 1) {
        insn32(0xe28f0008);    # add r0, pc, #8
        insn32(0xecb00b20);    # vldmia r0!, {d0-d15}
    } elsif ($vfp == 2) {
        insn32(0xe28f000c);    # add r0, pc, #12
        insn32(0xecb00b20);    # vldmia r0!, {d0-d15}
        insn32(0xecf00b20);    # vldmia r0!, {d16-d31}
    } else {
        insn32(0xe28f0004);    # add r0, pc, #4
    }
    
    insn32(0xe8905fff);        # ldmia r0, {r0-r12,r14}
    my $datalen = 14;
    $datalen += (32 * $vfp);
    insn32(0xea000000 + ($datalen-1));    # b next
    for (0..(($vfp * 16) - 1)) {
        write_random_fpreg();
    }
    #  .word [14 words of data for r0..r12,r14]
    for (0..13) {
        insn32(rand(0xffffffff));
    }
    # next:
    # clear the flags (NZCVQ and GE): msr APSR_nzcvqg, #0
    insn32(0xe32cf000);
    if ($is_thumb) {
        write_switch_to_thumb();
    }
    write_compare();
}

sub write_arm_prologue()
{
    # We will start in ARM mode because we're just loaded
    # as binary and jump to the aligned start of it, so
    # the target address LSB is always 0.
    if ($is_thumb) {
        # This mode change will be immediately followed by one
        # in write_random_register_data() but never mind.
        write_switch_to_thumb();
    }
    write_random_register_data();
}

sub dump_insn_details($@)
{
    # Dump the instruction details for one insn
    my ($insn, @arr) = @_;
    print "insn $insn: ";
    my $insnwidth = shift @arr;
    my $fixedbits = shift @arr;
    my $fixedbitmask = shift @arr;
    print sprintf(" insnwidth %d fixedbits %08x mask %08x ", $insnwidth, $fixedbits, $fixedbitmask);
    for my $k (0 .. @arr /3 - 1) {
        my ($var, $pos, $mask) = ($arr[3*$k], $arr[3*$k+1],$arr[3*$k+2]);
        print "($var, $pos, " . sprintf("%08x", $mask) . ") ";
    }
    print "\n";
}

sub gen_one_insn($@)
{
    # Given an instruction-details array, generate an instruction
    INSN: while(1) {
        my ($forcecond, @arr) = @_;
        my $insn = int(rand(0xffffffff));
        my $insnwidth = shift @arr;
        my $fixedbits = shift @arr;
        my $fixedbitmask = shift @arr;

        $insn &= ~$fixedbitmask;
        $insn |= $fixedbits;
        for my $k (0 .. @arr /3 - 1) {
            my ($var, $pos, $mask) = ($arr[3*$k], $arr[3*$k+1],$arr[3*$k+2]);
            my $val = ($insn >> $pos) & $mask;
            # Check constraints here:
            # not allowed to use or modify sp or pc
            next INSN if ($var =~ /^r/ && (($val == 13) || ($val == 15)));
            # Some very arm-specific code to force the condition field
            # to 'always' if requested.
            if ($forcecond) {
                if ($var eq "cond") {
                    $insn &= ~ ($mask << $pos);
                    $insn |= (0xe << $pos);
                }
            }
        }
        # OK, we got a good one
        if ($is_thumb) {
            # Since the encoding diagrams in the ARM ARM give 32 bit
            # Thumb instructions as low half | high half, we
            # flip the halves here so that the input format in
            # the config file can be in the same order as the ARM.
            # For a 16 bit Thumb instruction the generated insn is in
            # the high halfword (because we didn't bother to readjust
            # all the bit positions in parse_config_file() when we
            # got to the end and found we only had 16 bits).
            insn16($insn >> 16);
            if ($insnwidth == 32) {
                insn16($insn & 0xffff);
            }
        } else {
            # ARM is simple, always a 32 bit word
            insn32($insn);
        }
        return;
    }
}

my $lastprog;
my $proglen;
my $progmax;

sub progress_start($$)
{
    ($proglen, $progmax) = @_;
    $proglen -= 2; # allow for [] chars
    $| = 1;        # disable buffering so we can see the meter...
    print "[" . " " x $proglen . "]\r";
    $lastprog = 0;
}

sub progress_update($)
{
    # update the progress bar with current progress
    my ($done) = @_;
    my $barlen = int($proglen * $done / $progmax);
    if ($barlen != $lastprog) {
        $lastprog = $barlen;
        print "[" . "-" x $barlen . " " x ($proglen - $barlen) . "]\r";
    }
}

sub progress_end()
{
    print "[" . "-" x $proglen . "]\n";
    $| = 0;
}

sub write_test_code($$)
{
    my ($condprob, $numinsns) = @_;
    # convert from probability that insn will be conditional to
    # probability of forcing insn to unconditional
    $condprob = 1 - $condprob;

    # TODO better random number generator?
    srand(0);

    # Get a list of the insn keys which are permitted by the re patterns
    my @keys = keys %insn_details;
    if (@pattern_re) {
        my $re = '(' . join(')|(',@pattern_re) . ')';
        @keys = grep /$re/, @keys;
    }
    if (!@keys) {
        print STDERR "No instruction patterns available! (bad config file or --pattern argument?)\n";
        exit(1);
    }
    print "Generating code using patterns: @keys...\n";
    progress_start(78, $numinsns);

    for my $i (1..$numinsns) {
        my $insn_enc = $keys[int rand (@keys)];
        #dump_insn_details($insn_enc, @{$insn_details{$insn_enc}});
        my $forcecond = (rand() < $condprob) ? 1 : 0;
        gen_one_insn($forcecond, @{$insn_details{$insn_enc}});
        write_compare();
        # Rewrite the registers periodically. This avoids the tendency
        # for the VFP registers to decay to NaNs and zeroes.
        if (($i % 100) == 0) {
            write_random_register_data();
        }
        progress_update($i);
    }
    progress_end();
}

sub parse_config_file($)
{
    # Read in the config file defining the instructions we can generate
    my ($file) = @_;
    # The format here is:
    # insnname encodingname bitfield ...
    # (and we'll have a trailing bit for specifying constraints later)
    # where each bitfield is either:
    #  var:sz  specifying a variable field of size sz (sz == 0 if :sz omitted)
    #  [01]*   specifying fixed bits
    # Field names beginning 'r' are special as they are assumed to be general
    # purpose registers. They get an automatic "cannot be 13 or 15" (sp/pc)
    # constraint.

    # Our data structure here is fairly simple:
    # an assoc array %insn_details whose keys are "insn_enc" strings
    # and whose values are array references. Each array is, in order:
    #  fixedbits, fixedbitmask, var,bitpos,mask , var,bitpos,mask ...

    open(CFILE, $file) or die "can't open $file: $!";
    while (<CFILE>)
    {
        next if /^\s*#/;
        next if /^\s*$/;
        my ($insn, $enc, @bits) = split;
        if (!defined $enc) {
            print STDERR "$file:$.: no insn or encoding?\n";
            exit(1);
        }
        my $insnname = "${insn}_${enc}";
        if (exists $insn_details{$insnname}) {
            print STDERR "$file:$.: redefinition of $insnname\n";
            exit(1);
        }

        my $fixedbits = 0;
        my $fixedbitmask = 0;
        my $bitpos = 32;
        my $insnwidth = 32;
        foreach my $bit (@bits) {
            my $bitlen;
            my $bitval;
            my $var;
            if ($bit =~ /^[01]*$/) {
                # fixed bits
                $bitlen = length($bit);
                $bitval = oct("0b".$bit);
            } elsif ($bit =~ /^([a-zA-Z]+):([0-9]+)$/) {
                # variable field
                $var = $1;
                $bitlen = $2;
            } elsif($bit =~ /^([a-zA-Z]+)$/) {
                # single bit variable field
                $var = $1;
                $bitlen = 1;
            } else {
                print STDERR "$file:$.: ($insn $enc) unrecognised bitfield specifier $bit\n";
                exit(1);
            }

            my $bitmask = oct("0b". '1' x $bitlen);
            $bitpos -= $bitlen;
            if ($bitpos < 0) {
                print STDERR "$file:$.: ($insn $enc) too many bits specified\n";
                exit(1);
            }

            if (defined $bitval) {
                $fixedbits |= ($bitval << $bitpos);
                $fixedbitmask |= ($bitmask << $bitpos);
            } else {
                push @{$insn_details{$insnname}}, $var, $bitpos, $bitmask;
            }
        }
        if ($bitpos == 16) {
            # assume this is a half-width thumb instruction
            # Note that we don't fiddle with the bitmasks or positions,
            # which means the generated insn will be in the high halfword!
            $insnwidth = 16;
        } elsif ($bitpos != 0) {
            print STDERR "$file:$.: ($insn $enc) not enough bits specified\n";
            exit(1);
        }
        if ((($fixedbits & $fixedbitmask) != $fixedbits)
            || (($fixedbits & ~$fixedbitmask) != 0)) {
            die "internal error: fixed bits not lined up with mask";
        }
        #  Stick the fixedbit info on the front of the array now we know it
        unshift @{$insn_details{$insnname}}, $insnwidth, $fixedbits, $fixedbitmask;
    }
    close(CFILE) or die "can't close $file: $!";
}

sub usage()
{
    print <<EOT;
Usage: risugen [options] inputfile outputfile

where inputfile is a configuration file specifying instruction patterns
and outputfile is the generated raw binary file.

Valid options:
    --thumb      : the instructions in the config file are Thumb, not ARM
    --numinsns n : generate n instructions (default is 10000)
    --condprob p : make instructions conditional with probability p
                   (default is 0, ie all instructions are always executed)
    --pattern re[,re...] : only use instructions matching regular expression
    --help       : print this message
EOT
}

sub main()
{
    my $numinsns = 10000;
    my $condprob = 0;
    my ($infile, $outfile);

    GetOptions( "help" => sub { usage(); exit(0); },
                "thumb" => \$is_thumb,
                "numinsns=i" => \$numinsns,
                "pattern=s" => \@pattern_re,
                "condprob=f" => sub { 
                    $condprob = $_[1];
                    if ($condprob < 0.0 || $condprob > 1.0) {
                        die "Value \"$condprob\" invalid for option condprob (must be between 0 and 1)\n";
                    }
                },
        ) or return 1;
    # allow "--pattern re,re" and "--pattern re --pattern re"
    @pattern_re = split(/,/,join(',',@pattern_re));

    if ($#ARGV != 1) {
        usage();
        return 1;
    }

    $infile = $ARGV[0];
    $outfile = $ARGV[1];

    parse_config_file($infile);
    
    open_bin($outfile);
    write_arm_prologue();
    write_test_code($condprob, $numinsns);
    write_test_end();
    close_bin();
    return 0;
}

exit(main);

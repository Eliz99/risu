#!/usr/bin/perl -w
#
# risugen -- generate a test binary file for use with risu
# Copyright 2010 Linaro Limited.

# Usage: risugen outputfile

use strict;

my @insns;
my %insn_details;

sub open_bin
{
    my ($fname) = @_;
    open(BIN, ">", $fname) or die "can't open %fname: $!";
}

sub close_bin
{
    close(BIN) or die "can't close output file: $!";
}

sub insn32($)
{
    my ($insn) = @_;
    print BIN pack("V", $insn);
}

# The space 0xE7F___F_ is guaranteed to always UNDEF
# and not to be allocated for insns in future architecture
# revisions. So we use it for our 'do comparison' and
# 'end of test' instructions.
# We fill in the middle bit with a randomly selected
# 'e5a' just in case the space is being used by somebody
# else too.

sub write_test_end()
{
    insn32(0xe7fe5af1);
}

sub write_compare()
{
    insn32(0xe7fe5af0);
}

sub write_arm_prologue()
{
    # We will start in ARM mode because we're just loaded
    # as binary and jump to the aligned start of it, so
    # the target address LSB is always 0.
    
    # initialise all registers
    # add r0, pc, #4
    insn32(0xe28f0004);
    # ldmia r0, {r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r14}
    insn32(0xe8905fff);
    # b next
    insn32(0xea00000d);
    #  .word [14 words of data for r0..r12,r14]
    insn32(0x1234567); insn32(0x37346434); insn32(0x68124126); insn32(0x34716483);
    insn32(0x7917464); insn32(0xabcedef0); insn32(0xab8e83ba); insn32(0x734ba84a);
    insn32(0x7a923ba); insn32(0x841b823a); insn32(0xb1024ab2); insn32(0x87346141);
    insn32(0x7416231); insn32(0x97857623);
    # next:
    # clear the flags (NZCVQ and GE): msr APSR_nzcvqg, #0
    insn32(0xe32cf000);
    write_compare();
}

sub dump_insn_details($@)
{
    # Dump the instruction details for one insn
    my ($insn, @arr) = @_;
    print "insn $insn: ";
    my $fixedbits = shift @arr;
    my $fixedbitmask = shift @arr;
    print sprintf(" fixedbits %08x mask %08x ", $fixedbits, $fixedbitmask);
    for my $k (0 .. @arr /3 - 1) {
        my ($var, $pos, $mask) = ($arr[3*$k], $arr[3*$k+1],$arr[3*$k+2]);
        print "($var, $pos, " . sprintf("%08x", $mask) . ") ";
    }
    print "\n";
}

sub write_test_code()
{
    # let's just dump the data structure for the moment
    for my $insn_enc (keys %insn_details) {
        dump_insn_details($insn_enc, @{$insn_details{$insn_enc}});
    }
}

sub parse_config_file($)
{
    # Read in the config file defining the instructions we can generate
    my ($file) = @_;
    # The format here is:
    # insnname encodingname bitfield ...
    # (and we'll have a trailing bit for specifying constraints later)
    # where each bitfield is either:
    #  var:sz  specifying a variable field of size sz (sz == 0 if :sz omitted)
    #  [01]*   specifying fixed bits
    # Field names beginning 'r' are special as they are assumed to be general
    # purpose registers. They get an automatic "cannot be 13 or 15" (sp/pc)
    # constraint.

    # Our data structure here is fairly simple:
    # an assoc array %insn_details whose keys are "insn_enc" strings
    # and whose values are array references. Each array is, in order:
    #  fixedbits, fixedbitmask, var,bitpos,mask , var,bitpos,mask ...

    open(CFILE, $file) or die "can't open $file: $!";
    while (<CFILE>)
    {
        next if /^\s*#/;
        next if /^\s*$/;
        my ($insn, $enc, @bits) = split;
        if (!defined $enc) {
            print STDERR "$file:$.: no insn or encoding?\n";
            exit(1);
        }
        my $insnname = "${insn}_${enc}";
        if (exists $insn_details{$insnname}) {
            print STDERR "$file:$.: redefinition of $insnname\n";
            exit(1);
        }

        my $fixedbits = 0;
        my $fixedbitmask = 0;
        my $bitpos = 32;
        foreach my $bit (@bits) {
            my $bitlen;
            my $bitval;
            my $var;
            if ($bit =~ /^[01]*$/) {
                # fixed bits
                $bitlen = length($bit);
                $bitval = oct("0b".$bit);
            } elsif ($bit =~ /^([a-zA-Z]+):([0-9]+)$/) {
                # variable field
                $var = $1;
                $bitlen = $2;
            } elsif($bit =~ /^([a-zA-Z]+)$/) {
                # single bit variable field
                $var = $1;
                $bitlen = 1;
            } else {
                print STDERR "$file:$.: unrecognised bitfield specifier $bit\n";
                exit(1);
            }

            my $bitmask = oct("0b". '1' x $bitlen);
            $bitpos -= $bitlen;
            if ($bitpos < 0) {
                print STDERR "$file:$.: too many bits specified\n";
                exit(1);
            }

            if (defined $bitval) {
                $fixedbits |= ($bitval << $bitpos);
                $fixedbitmask |= ($bitmask << $bitpos);
            } else {
                push @{$insn_details{$insnname}}, $var, $bitpos, $bitmask;
            }
        }
        if ($bitpos != 0) {
            print STDERR "$file:$.: not enough bits specified\n";
            exit(1);
        }
        if ((($fixedbits & $fixedbitmask) != $fixedbits)
            || (($fixedbits & ~$fixedbitmask) != 0)) {
            die "internal error: fixed bits not lined up with mask";
        }
        #  Stick the fixedbit info on the front of the array now we know it
        unshift @{$insn_details{$insnname}}, $fixedbits, $fixedbitmask;
    }
    close(CFILE) or die "can't close $file: $!";
}


sub main()
{
    my $fname;
    if ($#ARGV != 1) {
        print STDERR "Usage: risugen inputfile outputfile\n";
        return 1;
    }
    my $infile = $ARGV[0];
    my $outfile = $ARGV[1];

    parse_config_file($infile);
    
    open_bin($outfile);
    write_arm_prologue();
    write_test_code();
    write_test_end();
    close_bin();
    return 0;
}

exit(main);
